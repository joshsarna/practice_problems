=begin

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

=end

# fibonacci = [1]
# sum = 0
# value = 1
# while value < 4000000
#   fibonacci << value
#   value = fibonacci[fibonacci.length - 1] + fibonacci[fibonacci.length - 2]
# end

# fibonacci.each do |element|
#   if element % 2 == 0
#     sum += element
#   end
# end

# p fibonacci
# p sum  # => 4613732

# Using recursion

@fibonacci = [1,2]
def recursive_fib(number) # number should always be two
  if @fibonacci.last > 4000000
    @fibonacci.delete(@fibonacci.last)
    return @fibonacci
  else
    @fibonacci << (@fibonacci[number - 2] || 1) + (@fibonacci[number - 1]|| 1)
    return recursive_fib(number + 1)
  end
end

sum = 0
recursive_fib(2).each do |element|
  if element % 2 == 0
    sum += element
  end
end

p sum  # => 4613732